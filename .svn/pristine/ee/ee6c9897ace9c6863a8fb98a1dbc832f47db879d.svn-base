
using ControlApp.Application;
using ControlApp.Application.Interfaces;
using ControlApp.Dominio.Interfaces.Repository;
using ControlApp.Dominio.Interfaces.Services;
using ControlApp.Dominio.Services;
using ControlApp.Infraestrutura.Data.Repository;
using SimpleInjector;
using System;
namespace ControlApp.DependencyResolver
{
    public class DependencyInjectionResolver
    {
        private readonly Container _container;

        public DependencyInjectionResolver()
        {
            if (_container == null)
            {
                _container = GetContainer();
            }
        }

        public object GetInstance<TClass>()
            where TClass : class
        {
            return _container.GetInstance<TClass>();
        }


        private Container GetContainer()
        {
            var container = new Container();

            // Register your types, for instance:

            //APPLICATION
            container.RegisterSingle<IClientAppService, ClientAppService>();
            container.RegisterSingle<IGroupAppService, GroupAppService>();
            container.RegisterSingle<IPermissionAppService, PermissionAppService>();
            container.RegisterSingle<IUserAppService, UserAppService>();


            //SERVICES
            container.RegisterSingle<IUserService, UserService>();
            container.RegisterSingle<IPermissionService, PermissionService>();
            container.RegisterSingle<IGroupService, GroupService>();
            container.RegisterSingle<IClientService, ClientService>();
            container.RegisterSingle<IApplicationService, ApplicationService>();

            //REPOSITORYS
            container.RegisterSingle<IUserRepository, UserRepository>();
            container.RegisterSingle<IPermissionRepository, PermissionRepository>();
            container.RegisterSingle<IGroupRepository, GroupRepository>();
            container.RegisterSingle<IClientRepository, ClientRepository>();
            container.RegisterSingle<IApplicationRepository, ApplicationRepository>();


           // container.RegisterSingle<IUserService, UserService>();
            //container.RegisterSingle<IUserService, UserService>();


            return container;
        }
    }
}
